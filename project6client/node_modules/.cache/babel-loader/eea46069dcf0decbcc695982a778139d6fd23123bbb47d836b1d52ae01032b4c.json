{"ast":null,"code":"var _jsxFileName = \"C:\\\\fullstack\\\\project6all\\\\project6client\\\\src\\\\pages\\\\Posts.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import \"./Posts.css\";\n// import {\n//   requestsGet,\n//   requestsPost,\n//   requestsPut,\n//   requestsDelete,\n// } from \"../requestsToServer.js\";\n\n// const Post = ({ post, onPostSelect }) => {\n//   const [showComments, setShowComments] = useState(false);\n//   const [comments, setComments] = useState([]);\n\n//   const handleToggleComments = async () => {\n//     if (showComments) {\n//       setShowComments(false);\n//     } else {\n//       try {\n//         const data = await requestsGet(`/posts/${post.id}/comments`);\n//         // const response = await fetch(\n//         //   `http://localhost:4000/posts/${post.id}/comments`\n//         // );\n//         // const data = await response.json();\n//         setComments(data);\n//         setShowComments(true);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"post-item\">\n//       <h2\n//         className={`post-title ${onPostSelect === post.id ? \"active\" : \"\"}`}\n//         onClick={() => onPostSelect(post.id)}\n//       >\n//         {post.title}\n//       </h2>\n//       <div className=\"post-body\">{post.body}</div>\n//       <button className=\"comments-toggle\" onClick={handleToggleComments}>\n//         {showComments ? \"Hide Comments\" : \"Show Comments\"}\n//       </button>\n//       {showComments && (\n//         <div className=\"comments-container\">\n//           {comments.map((comment) => (\n//             <div key={comment.id} className=\"comment-item\">\n//               <h4 className=\"comment-name\">{comment.name}</h4>\n//               <div className=\"comment-email\">{comment.email}</div>\n//               <div className=\"comment-body\">{comment.body}</div>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [selectedPost, setSelectedPost] = useState(null);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         var user = JSON.parse(localStorage.getItem(\"currentUser\"));\n\n//         const data = await requestsGet(`/users/${user.id}/posts`);\n//         // const response = await fetch(\n//         //   `http://localhost:4000/users/${user.id}/posts`\n//         // );\n//         // const data = await response.json();\n//         console.log(data);\n//         setPosts(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n\n//     fetchData();\n//   }, []);\n\n//   const handlePostSelect = (postId) => {\n//     setSelectedPost(postId);\n//   };\n\n//   return (\n//     <div className=\"posts-container\">\n//       <h1 className=\"posts-header\">Posts</h1>\n//       <div className=\"posts-list\">\n//         {posts.map((post) => (\n//           <Post key={post.id} post={post} onPostSelect={handlePostSelect} />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\nimport { useEffect, useState } from \"react\";\nimport \"./Posts.css\";\nimport { requestsGet, requestsPost, requestsPut, requestsDelete } from \"../requestsToServer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = _ref => {\n  _s();\n  let {\n    comment,\n    onUpdateComment,\n    onDeleteComment\n  } = _ref;\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedBody, setUpdatedBody] = useState(comment.body);\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setUpdatedBody(comment.body);\n  };\n  const handleSaveEdit = () => {\n    onUpdateComment(comment.id, updatedBody);\n    setIsEditing(false);\n  };\n  const handleDelete = () => {\n    onDeleteComment(comment.id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-item\",\n    children: [!isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-body\",\n      children: comment.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"comment-edit-input\",\n      value: updatedBody,\n      onChange: e => setUpdatedBody(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), !isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEdit,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveEdit,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelEdit,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(Comment, \"jh5rtcCPjkrIMKHTUYjfYiiStCY=\");\n_c = Comment;\nconst Post = _ref2 => {\n  _s2();\n  let {\n    post,\n    onPostSelect,\n    onUpdatePost,\n    onDeletePost\n  } = _ref2;\n  const [showComments, setShowComments] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedTitle, setUpdatedTitle] = useState(post.title);\n  const [updatedBody, setUpdatedBody] = useState(post.body);\n  const handleToggleComments = async () => {\n    if (showComments) {\n      setShowComments(false);\n    } else {\n      try {\n        const data = await requestsGet(`/posts/${post.id}/comments`);\n        setComments(data);\n        setShowComments(true);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n  const handleAddComment = async event => {\n    event.preventDefault();\n    const newCommentData = {\n      postId: post.id,\n      body: newComment\n    };\n    try {\n      const response = await requestsPost(\"/comments\", newCommentData);\n      const createdComment = response.data;\n      setComments([...comments, createdComment]);\n      setNewComment(\"\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleUpdateComment = async (commentId, updatedBody) => {\n    const updatedCommentData = {\n      body: updatedBody\n    };\n    try {\n      await requestsPut(`/comments/${commentId}`, updatedCommentData);\n      const updatedComments = comments.map(comment => comment.id === commentId ? {\n        ...comment,\n        body: updatedBody\n      } : comment);\n      setComments(updatedComments);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleDeleteComment = async commentId => {\n    try {\n      await requestsDelete(`/comments/${commentId}`);\n      const updatedComments = comments.filter(comment => comment.id !== commentId);\n      setComments(updatedComments);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setUpdatedTitle(post.title);\n    setUpdatedBody(post.body);\n  };\n  const handleSaveEdit = () => {\n    onUpdatePost(post.id, updatedTitle, updatedBody);\n    setIsEditing(false);\n  };\n  const handleDelete = () => {\n    onDeletePost(post.id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-item\",\n    children: [!isEditing ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: `post-title ${onPostSelect === post.id ? \"active\" : \"\"}`,\n      onClick: () => onPostSelect(post.id),\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"post-title-edit-input\",\n      value: updatedTitle,\n      onChange: e => setUpdatedTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-body\",\n      children: !isEditing ? post.body : /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"post-body-edit-input\",\n        value: updatedBody,\n        onChange: e => setUpdatedBody(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), !isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEdit,\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveEdit,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancelEdit,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"comments-toggle\",\n      onClick: handleToggleComments,\n      children: showComments ? \"Hide Comments\" : \"Show Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), showComments && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: [comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment,\n        onUpdateComment: handleUpdateComment,\n        onDeleteComment: handleDeleteComment\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"comment-form\",\n        onSubmit: handleAddComment,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Add a comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s2(Post, \"hiuqYyh1fcK1VdvjVC73UTL76xQ=\");\n_c2 = Post;\nconst Posts = () => {\n  _s3();\n  const [posts, setPosts] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        var user = JSON.parse(localStorage.getItem(\"currentUser\"));\n        const data = await requestsGet(`/users/${user.id}/posts`);\n        setPosts(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchData();\n  }, []);\n  const handlePostSelect = postId => {\n    setSelectedPost(postId);\n  };\n  const handleAddPost = async () => {\n    const newPostData = {\n      title: \"New Post\",\n      body: \"This is a new post.\"\n    };\n    try {\n      const response = await requestsPost(\"/posts\", newPostData);\n      const createdPost = response.data;\n      setPosts([...posts, createdPost]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleUpdatePost = async (postId, updatedTitle, updatedBody) => {\n    const updatedPostData = {\n      title: updatedTitle,\n      body: updatedBody\n    };\n    try {\n      await requestsPut(`/posts/${postId}`, updatedPostData);\n      const updatedPosts = posts.map(post => post.id === postId ? {\n        ...post,\n        title: updatedTitle,\n        body: updatedBody\n      } : post);\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleDeletePost = async postId => {\n    try {\n      await requestsDelete(`/posts/${postId}`);\n      const updatedPosts = posts.filter(post => post.id !== postId);\n      setPosts(updatedPosts);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"posts-header\",\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-list\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        onPostSelect: handlePostSelect,\n        onUpdatePost: handleUpdatePost,\n        onDeletePost: handleDeletePost\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-post-btn\",\n      onClick: handleAddPost,\n      children: \"Add Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n};\n_s3(Posts, \"nZP3Fsrc8kzc4EI8y80UU9Kha0Q=\");\n_c3 = Posts;\nexport default Posts;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Comment\");\n$RefreshReg$(_c2, \"Post\");\n$RefreshReg$(_c3, \"Posts\");","map":{"version":3,"names":["useEffect","useState","requestsGet","requestsPost","requestsPut","requestsDelete","jsxDEV","_jsxDEV","Comment","_ref","_s","comment","onUpdateComment","onDeleteComment","isEditing","setIsEditing","updatedBody","setUpdatedBody","body","handleEdit","handleCancelEdit","handleSaveEdit","id","handleDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","Post","_ref2","_s2","post","onPostSelect","onUpdatePost","onDeletePost","showComments","setShowComments","comments","setComments","newComment","setNewComment","updatedTitle","setUpdatedTitle","title","handleToggleComments","data","error","console","handleAddComment","event","preventDefault","newCommentData","postId","response","createdComment","handleUpdateComment","commentId","updatedCommentData","updatedComments","map","handleDeleteComment","filter","onSubmit","type","placeholder","_c2","Posts","_s3","posts","setPosts","selectedPost","setSelectedPost","fetchData","user","JSON","parse","localStorage","getItem","handlePostSelect","handleAddPost","newPostData","createdPost","handleUpdatePost","updatedPostData","updatedPosts","handleDeletePost","_c3","$RefreshReg$"],"sources":["C:/fullstack/project6all/project6client/src/pages/Posts.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import \"./Posts.css\";\r\n// import {\r\n//   requestsGet,\r\n//   requestsPost,\r\n//   requestsPut,\r\n//   requestsDelete,\r\n// } from \"../requestsToServer.js\";\r\n\r\n// const Post = ({ post, onPostSelect }) => {\r\n//   const [showComments, setShowComments] = useState(false);\r\n//   const [comments, setComments] = useState([]);\r\n\r\n//   const handleToggleComments = async () => {\r\n//     if (showComments) {\r\n//       setShowComments(false);\r\n//     } else {\r\n//       try {\r\n//         const data = await requestsGet(`/posts/${post.id}/comments`);\r\n//         // const response = await fetch(\r\n//         //   `http://localhost:4000/posts/${post.id}/comments`\r\n//         // );\r\n//         // const data = await response.json();\r\n//         setComments(data);\r\n//         setShowComments(true);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"post-item\">\r\n//       <h2\r\n//         className={`post-title ${onPostSelect === post.id ? \"active\" : \"\"}`}\r\n//         onClick={() => onPostSelect(post.id)}\r\n//       >\r\n//         {post.title}\r\n//       </h2>\r\n//       <div className=\"post-body\">{post.body}</div>\r\n//       <button className=\"comments-toggle\" onClick={handleToggleComments}>\r\n//         {showComments ? \"Hide Comments\" : \"Show Comments\"}\r\n//       </button>\r\n//       {showComments && (\r\n//         <div className=\"comments-container\">\r\n//           {comments.map((comment) => (\r\n//             <div key={comment.id} className=\"comment-item\">\r\n//               <h4 className=\"comment-name\">{comment.name}</h4>\r\n//               <div className=\"comment-email\">{comment.email}</div>\r\n//               <div className=\"comment-body\">{comment.body}</div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Posts = () => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [selectedPost, setSelectedPost] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchData() {\r\n//       try {\r\n//         var user = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n\r\n//         const data = await requestsGet(`/users/${user.id}/posts`);\r\n//         // const response = await fetch(\r\n//         //   `http://localhost:4000/users/${user.id}/posts`\r\n//         // );\r\n//         // const data = await response.json();\r\n//         console.log(data);\r\n//         setPosts(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     }\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const handlePostSelect = (postId) => {\r\n//     setSelectedPost(postId);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container\">\r\n//       <h1 className=\"posts-header\">Posts</h1>\r\n//       <div className=\"posts-list\">\r\n//         {posts.map((post) => (\r\n//           <Post key={post.id} post={post} onPostSelect={handlePostSelect} />\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Posts;\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./Posts.css\";\r\nimport {\r\n  requestsGet,\r\n  requestsPost,\r\n  requestsPut,\r\n  requestsDelete,\r\n} from \"../requestsToServer.js\";\r\n\r\nconst Comment = ({ comment, onUpdateComment, onDeleteComment }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [updatedBody, setUpdatedBody] = useState(comment.body);\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setIsEditing(false);\r\n    setUpdatedBody(comment.body);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    onUpdateComment(comment.id, updatedBody);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    onDeleteComment(comment.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"comment-item\">\r\n      {!isEditing ? (\r\n        <div className=\"comment-body\">{comment.body}</div>\r\n      ) : (\r\n        <textarea\r\n          className=\"comment-edit-input\"\r\n          value={updatedBody}\r\n          onChange={(e) => setUpdatedBody(e.target.value)}\r\n        />\r\n      )}\r\n      {!isEditing ? (\r\n        <div className=\"comment-actions\">\r\n          <button onClick={handleEdit}>Edit</button>\r\n          <button onClick={handleDelete}>Delete</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"comment-actions\">\r\n          <button onClick={handleSaveEdit}>Save</button>\r\n          <button onClick={handleCancelEdit}>Cancel</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Post = ({ post, onPostSelect, onUpdatePost, onDeletePost }) => {\r\n  const [showComments, setShowComments] = useState(false);\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [updatedTitle, setUpdatedTitle] = useState(post.title);\r\n  const [updatedBody, setUpdatedBody] = useState(post.body);\r\n\r\n  const handleToggleComments = async () => {\r\n    if (showComments) {\r\n      setShowComments(false);\r\n    } else {\r\n      try {\r\n        const data = await requestsGet(`/posts/${post.id}/comments`);\r\n        setComments(data);\r\n        setShowComments(true);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddComment = async (event) => {\r\n    event.preventDefault();\r\n    const newCommentData = {\r\n      postId: post.id,\r\n      body: newComment,\r\n    };\r\n\r\n    try {\r\n      const response = await requestsPost(\"/comments\", newCommentData);\r\n      const createdComment = response.data;\r\n      setComments([...comments, createdComment]);\r\n      setNewComment(\"\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateComment = async (commentId, updatedBody) => {\r\n    const updatedCommentData = {\r\n      body: updatedBody,\r\n    };\r\n\r\n    try {\r\n      await requestsPut(`/comments/${commentId}`, updatedCommentData);\r\n      const updatedComments = comments.map((comment) =>\r\n        comment.id === commentId ? { ...comment, body: updatedBody } : comment\r\n      );\r\n      setComments(updatedComments);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteComment = async (commentId) => {\r\n    try {\r\n      await requestsDelete(`/comments/${commentId}`);\r\n      const updatedComments = comments.filter(\r\n        (comment) => comment.id !== commentId\r\n      );\r\n      setComments(updatedComments);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setIsEditing(false);\r\n    setUpdatedTitle(post.title);\r\n    setUpdatedBody(post.body);\r\n  };\r\n\r\n  const handleSaveEdit = () => {\r\n    onUpdatePost(post.id, updatedTitle, updatedBody);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    onDeletePost(post.id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-item\">\r\n      {!isEditing ? (\r\n        <h2\r\n          className={`post-title ${onPostSelect === post.id ? \"active\" : \"\"}`}\r\n          onClick={() => onPostSelect(post.id)}\r\n        >\r\n          {post.title}\r\n        </h2>\r\n      ) : (\r\n        <input\r\n          className=\"post-title-edit-input\"\r\n          value={updatedTitle}\r\n          onChange={(e) => setUpdatedTitle(e.target.value)}\r\n        />\r\n      )}\r\n      <div className=\"post-body\">\r\n        {!isEditing ? (\r\n          post.body\r\n        ) : (\r\n          <textarea\r\n            className=\"post-body-edit-input\"\r\n            value={updatedBody}\r\n            onChange={(e) => setUpdatedBody(e.target.value)}\r\n          />\r\n        )}\r\n      </div>\r\n      {!isEditing ? (\r\n        <div className=\"post-actions\">\r\n          <button onClick={handleEdit}>Edit</button>\r\n          <button onClick={handleDelete}>Delete</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"post-actions\">\r\n          <button onClick={handleSaveEdit}>Save</button>\r\n          <button onClick={handleCancelEdit}>Cancel</button>\r\n        </div>\r\n      )}\r\n      <button className=\"comments-toggle\" onClick={handleToggleComments}>\r\n        {showComments ? \"Hide Comments\" : \"Show Comments\"}\r\n      </button>\r\n      {showComments && (\r\n        <div className=\"comments-container\">\r\n          {comments.map((comment) => (\r\n            <Comment\r\n              key={comment.id}\r\n              comment={comment}\r\n              onUpdateComment={handleUpdateComment}\r\n              onDeleteComment={handleDeleteComment}\r\n            />\r\n          ))}\r\n          <form className=\"comment-form\" onSubmit={handleAddComment}>\r\n            <input\r\n              type=\"text\"\r\n              value={newComment}\r\n              onChange={(e) => setNewComment(e.target.value)}\r\n              placeholder=\"Add a comment...\"\r\n            />\r\n            <button type=\"submit\">Add Comment</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Posts = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedPost, setSelectedPost] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        var user = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        const data = await requestsGet(`/users/${user.id}/posts`);\r\n        setPosts(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handlePostSelect = (postId) => {\r\n    setSelectedPost(postId);\r\n  };\r\n\r\n  const handleAddPost = async () => {\r\n    const newPostData = {\r\n      title: \"New Post\",\r\n      body: \"This is a new post.\",\r\n    };\r\n\r\n    try {\r\n      const response = await requestsPost(\"/posts\", newPostData);\r\n      const createdPost = response.data;\r\n      setPosts([...posts, createdPost]);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleUpdatePost = async (postId, updatedTitle, updatedBody) => {\r\n    const updatedPostData = {\r\n      title: updatedTitle,\r\n      body: updatedBody,\r\n    };\r\n\r\n    try {\r\n      await requestsPut(`/posts/${postId}`, updatedPostData);\r\n      const updatedPosts = posts.map((post) =>\r\n        post.id === postId\r\n          ? { ...post, title: updatedTitle, body: updatedBody }\r\n          : post\r\n      );\r\n      setPosts(updatedPosts);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePost = async (postId) => {\r\n    try {\r\n      await requestsDelete(`/posts/${postId}`);\r\n      const updatedPosts = posts.filter((post) => post.id !== postId);\r\n      setPosts(updatedPosts);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts-container\">\r\n      <h1 className=\"posts-header\">Posts</h1>\r\n      <div className=\"posts-list\">\r\n        {posts.map((post) => (\r\n          <Post\r\n            key={post.id}\r\n            post={post}\r\n            onPostSelect={handlePostSelect}\r\n            onUpdatePost={handleUpdatePost}\r\n            onDeletePost={handleDeletePost}\r\n          />\r\n        ))}\r\n      </div>\r\n      <button className=\"add-post-btn\" onClick={handleAddPost}>\r\n        Add Post\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}