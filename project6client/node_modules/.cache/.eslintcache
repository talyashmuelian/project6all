[{"C:\\fullstack\\project6all\\project6client\\src\\index.js":"1","C:\\fullstack\\project6all\\project6client\\src\\App.js":"2","C:\\fullstack\\project6all\\project6client\\src\\reportWebVitals.js":"3","C:\\fullstack\\project6all\\project6client\\src\\pages\\Todos.js":"4","C:\\fullstack\\project6all\\project6client\\src\\pages\\Login.js":"5","C:\\fullstack\\project6all\\project6client\\src\\pages\\Posts.js":"6","C:\\fullstack\\project6all\\project6client\\src\\pages\\Users.js":"7","C:\\fullstack\\project6all\\project6client\\src\\pages\\Info.js":"8","C:\\fullstack\\project6all\\project6client\\src\\requestsToServer.js":"9"},{"size":552,"mtime":1683461779540,"results":"10","hashOfConfig":"11"},{"size":1078,"mtime":1687031866073,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1683461779544,"results":"13","hashOfConfig":"11"},{"size":3430,"mtime":1686772326988,"results":"14","hashOfConfig":"11"},{"size":2219,"mtime":1687031866078,"results":"15","hashOfConfig":"11"},{"size":2788,"mtime":1686770927905,"results":"16","hashOfConfig":"11"},{"size":1043,"mtime":1687031866080,"results":"17","hashOfConfig":"11"},{"size":1918,"mtime":1684308922692,"results":"18","hashOfConfig":"11"},{"size":1030,"mtime":1687033055834,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sx7ovt",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\fullstack\\project6all\\project6client\\src\\index.js",[],[],"C:\\fullstack\\project6all\\project6client\\src\\App.js",["49"],[],"C:\\fullstack\\project6all\\project6client\\src\\reportWebVitals.js",[],[],"C:\\fullstack\\project6all\\project6client\\src\\pages\\Todos.js",["50","51"],[],"import { useState, useEffect } from \"react\";\r\nimport \"./Todos.css\";\r\nimport {\r\n  requestsGet,\r\n  requestsPost,\r\n  requestsPut,\r\n  requestsDelete,\r\n} from \"../requestsToServer.js\";\r\n\r\nconst Select = ({ onSort }) => {\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    const sortType = event.target.value;\r\n    setSelectedValue(sortType);\r\n    onSort(sortType);\r\n  };\r\n\r\n  return (\r\n    <div className=\"selectComp\">\r\n      <label htmlFor=\"select\">Choose an option:</label>\r\n      <select id=\"select\" value={selectedValue} onChange={handleChange}>\r\n        <option value=\"\">--Please choose an option--</option>\r\n        <option value=\"serial\">Serial</option>\r\n        <option value=\"execution\">Execution</option>\r\n        <option value=\"alphabetical\">Alphabetical</option>\r\n        <option value=\"random\">Random</option>\r\n      </select>\r\n      <p>You selected: {selectedValue}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Todos = () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        var user = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n        const data = await requestsGet(`/users/${user.id}/todos`);\r\n\r\n        // const response = await fetch(\r\n        //   `http://localhost:4000/users/${user.id}/todos`\r\n        // );\r\n        // const data = await response.json();\r\n        setTodos(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleToggleTodo = (id) => {\r\n    let newObj;\r\n    const updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        newObj = {\r\n          ...todo,\r\n          completed: !todo.completed,\r\n        };\r\n        requestsPut(`/todos/${id}`, newObj);\r\n        return newObj;\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const handleSortTodos = (sortType) => {\r\n    let sortedTodos = [...todos];\r\n\r\n    switch (sortType) {\r\n      case \"serial\":\r\n        sortedTodos.sort((a, b) => a.id - b.id);\r\n        break;\r\n      case \"execution\":\r\n        sortedTodos.sort((a, b) => a.completed - b.completed);\r\n        break;\r\n      case \"alphabetical\":\r\n        sortedTodos.sort((a, b) => a.title.localeCompare(b.title));\r\n        break;\r\n      case \"random\":\r\n        sortedTodos.sort(() => Math.random() - 0.5);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    setTodos(sortedTodos);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todos-container\">\r\n      <h1 className=\"todos-header\">Todos</h1>\r\n      <Select onSort={handleSortTodos} />\r\n      <div className=\"background\">\r\n        <div className=\"todos-list\">\r\n          {todos.map((todo) => (\r\n            <div key={todo.id} className=\"todo-item\">\r\n              <label className=\"todo-label\">\r\n                <span className=\"todo-id\">{todo.id}</span>\r\n                <span className=\"todo-id\">- </span>\r\n                <span className=\"todo-title\">{todo.title}</span>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"todo-checkbox\"\r\n                  checked={todo.completed}\r\n                  onChange={() => handleToggleTodo(todo.id)}\r\n                />\r\n                <span className=\"todo-checkmark\"></span>\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","C:\\fullstack\\project6all\\project6client\\src\\pages\\Login.js",["52"],[],"C:\\fullstack\\project6all\\project6client\\src\\pages\\Posts.js",["53","54","55","56"],[],"import { useEffect, useState } from \"react\";\r\nimport \"./Posts.css\";\r\nimport {\r\n  requestsGet,\r\n  requestsPost,\r\n  requestsPut,\r\n  requestsDelete,\r\n} from \"../requestsToServer.js\";\r\n\r\nconst Post = ({ post, onPostSelect }) => {\r\n  const [showComments, setShowComments] = useState(false);\r\n  const [comments, setComments] = useState([]);\r\n\r\n  const handleToggleComments = async () => {\r\n    if (showComments) {\r\n      setShowComments(false);\r\n    } else {\r\n      try {\r\n        const data = await requestsGet(`/posts/${post.id}/comments`);\r\n        // const response = await fetch(\r\n        //   `http://localhost:4000/posts/${post.id}/comments`\r\n        // );\r\n        // const data = await response.json();\r\n        setComments(data);\r\n        setShowComments(true);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-item\">\r\n      <h2\r\n        className={`post-title ${onPostSelect === post.id ? \"active\" : \"\"}`}\r\n        onClick={() => onPostSelect(post.id)}\r\n      >\r\n        {post.title}\r\n      </h2>\r\n      <div className=\"post-body\">{post.body}</div>\r\n      <button className=\"comments-toggle\" onClick={handleToggleComments}>\r\n        {showComments ? \"Hide Comments\" : \"Show Comments\"}\r\n      </button>\r\n      {showComments && (\r\n        <div className=\"comments-container\">\r\n          {comments.map((comment) => (\r\n            <div key={comment.id} className=\"comment-item\">\r\n              <h4 className=\"comment-name\">{comment.name}</h4>\r\n              <div className=\"comment-email\">{comment.email}</div>\r\n              <div className=\"comment-body\">{comment.body}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Posts = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedPost, setSelectedPost] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        var user = JSON.parse(localStorage.getItem(\"currentUser\"));\r\n\r\n        const data = await requestsGet(`/users/${user.id}/posts`);\r\n        // const response = await fetch(\r\n        //   `http://localhost:4000/users/${user.id}/posts`\r\n        // );\r\n        // const data = await response.json();\r\n        console.log(data);\r\n        setPosts(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handlePostSelect = (postId) => {\r\n    setSelectedPost(postId);\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts-container\">\r\n      <h1 className=\"posts-header\">Posts</h1>\r\n      <div className=\"posts-list\">\r\n        {posts.map((post) => (\r\n          <Post key={post.id} post={post} onPostSelect={handlePostSelect} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","C:\\fullstack\\project6all\\project6client\\src\\pages\\Users.js",[],[],"C:\\fullstack\\project6all\\project6client\\src\\pages\\Info.js",[],[],"C:\\fullstack\\project6all\\project6client\\src\\requestsToServer.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":3,"column":8,"nodeType":"59","messageId":"60","endLine":3,"endColumn":16},{"ruleId":"57","severity":1,"message":"61","line":5,"column":3,"nodeType":"59","messageId":"60","endLine":5,"endColumn":15},{"ruleId":"57","severity":1,"message":"62","line":7,"column":3,"nodeType":"59","messageId":"60","endLine":7,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":16},{"ruleId":"57","severity":1,"message":"61","line":5,"column":3,"nodeType":"59","messageId":"60","endLine":5,"endColumn":15},{"ruleId":"57","severity":1,"message":"63","line":6,"column":3,"nodeType":"59","messageId":"60","endLine":6,"endColumn":14},{"ruleId":"57","severity":1,"message":"62","line":7,"column":3,"nodeType":"59","messageId":"60","endLine":7,"endColumn":17},{"ruleId":"57","severity":1,"message":"64","line":61,"column":10,"nodeType":"59","messageId":"60","endLine":61,"endColumn":22},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'requestsPost' is defined but never used.","'requestsDelete' is defined but never used.","'requestsPut' is defined but never used.","'selectedPost' is assigned a value but never used."]